const assert = require('nanoassert')
const { utils } = require('eth-helpers')
const keccak = require('sha3-wasm').keccak256
const eth = require('ethereumjs-util')
var Web3 = require("web3");
const {bnToHex} = require("ethereumjs-util");
const prefix = Buffer.from([0xff])
function create2 (address, salt, initCode) {
    if (typeof address === 'string') address = utils.parse.address(address)
    if (typeof salt === 'string') salt = utils.parse.uint256(salt)
    if (typeof initCode === 'string') initCode = utils.parse.bytes(initCode)

    assert(address.byteLength === 20, 'address must be 20 bytes')
    assert(salt.byteLength === 32, 'salt must be 32 bytes')
    assert(initCode.byteLength != null, 'initCode must be Buffer')

    const codeHash = initCode
    // eth.keccak256(prefixaddress,salt,codeHash)
    return utils.format.address(keccak()
        .update(prefix)
        .update(address)
        .update(salt)
        .update(codeHash)
        .digest()
        .slice(-20))
}

const creatorAddress = '0x791d6BD2deEE01255c17c8ab8aeb5De1e2E39692'

const creationCode='0x60806040526000600255600060035534801561001a57600080fd5b506107958061002a6000396000f3fe6080604052600436106100705760003560e01c806333d51a2f1161004e57806333d51a2f1461018d57806336b145351461019557806348da53a4146101c857806355d8bbd5146101dd57610070565b8063164084fb146100fe5780631b5f7d7f146101135780632f54bf6e14610146575b6003546100fc5760038054600101905560008054604080516372424d9960e11b815260c8600482015290516001600160a01b039092169263e4849b32926024808401936020939083900390910190829087803b1580156100cf57600080fd5b505af11580156100e3573d6000803e3d6000fd5b505050506040513d60208110156100f957600080fd5b50505b005b34801561010a57600080fd5b506100fc6101f2565b34801561011f57600080fd5b506100fc6004803603602081101561013657600080fd5b50356001600160a01b031661026e565b34801561015257600080fd5b506101796004803603602081101561016957600080fd5b50356001600160a01b03166103f3565b604080519115158252519081900360200190f35b6100fc610468565b3480156101a157600080fd5b506100fc600480360360208110156101b857600080fd5b50356001600160a01b031661055d565b3480156101d457600080fd5b506100fc610589565b3480156101e957600080fd5b506100fc610710565b60008054906101000a90046001600160a01b03166001600160a01b031663d56b28896040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561024057600080fd5b505af1158015610254573d6000803e3d6000fd5b505050506040513d602081101561026a57600080fd5b5050565b600080546040805163095ea7b360e01b81526001600160a01b0385811660048301526298968060248301529151919092169263095ea7b392604480820193602093909283900390910190829087803b1580156102c957600080fd5b505af11580156102dd573d6000803e3d6000fd5b505050506040513d60208110156102f357600080fd5b5050600054604080516370a0823160e01b815230600482015290516001600160a01b039092169163a9059cbb91849184916370a08231916024808301926020929190829003018186803b15801561034957600080fd5b505afa15801561035d573d6000803e3d6000fd5b505050506040513d602081101561037357600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156103c457600080fd5b505af11580156103d8573d6000803e3d6000fd5b505050506040513d60208110156103ee57600080fd5b505050565b60006002546000141561041157506002805460010190556000610463565b6002546001141561042e5750600280546001908101909155610463565b6002546002141561044a57506002805460010190556000610463565b6002546003141561046357506002805460019081019091555b919050565b610470610589565b600080546040805163f2fde38b60e01b815273220866b1a2219f40e72f5c628b65d54268ca3a9d600482015290516001600160a01b039092169263f2fde38b9260248084019382900301818387803b1580156104cb57600080fd5b505af11580156104df573d6000803e3d6000fd5b5050505060008054906101000a90046001600160a01b03166001600160a01b031663a6f2ae3a60016040518263ffffffff1660e01b81526004016020604051808303818588803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b50505050506040513d602081101561026a57600080fd5b600080546001600160a01b039092166001600160a01b0319928316811790915560018054909216179055565b60008054604080516351ec819f60e01b815230600482015290516001600160a01b03909216926351ec819f9260248084019382900301818387803b1580156105d057600080fd5b505af11580156105e4573d6000803e3d6000fd5b505060008054604080516362a0947760e01b815290516001600160a01b0390921694506362a094779350600480820193929182900301818387803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b5050600080546001546040805163601b235d60e11b81526001600160a01b039283166004820152905191909216945063c03646ba935060248083019360209383900390910190829087803b15801561069657600080fd5b505af11580156106aa573d6000803e3d6000fd5b505050506040513d60208110156106c057600080fd5b5050600080546040805163601b235d60e11b815230600482015290516001600160a01b039092169263c03646ba926024808401936020939083900390910190829087803b15801561024057600080fd5b60008054604080516372424d9960e11b815260c8600482015290516001600160a01b039092169263e4849b32926024808401936020939083900390910190829087803b15801561024057600080fdfea26469706673582212209cc7d2e533b21e475c4d1085893b92e8d2a37f4c05c1bdf695cf2d8a01fb72d764736f6c634300060c0033'

const initCode=keccak().update(utils.parse.bytes(creationCode)).digest()
var array=[];
var count=0;
for(let i=0; i<3143142142421434; i++){
    const saltInBytes = bnToHex(i);
    var saltInBytes32='0x'+'0'.repeat(64-saltInBytes.substring(2,saltInBytes.length).length)+saltInBytes.substring(2,saltInBytes.length)

    var address = create2(creatorAddress, saltInBytes32, initCode)
    if(address.endsWith("ffff")){
        console.log("salt: "+saltInBytes32)
        console.log("address: "+address)
        array.push(saltInBytes32)
        count++
        if(count==4){
            break;
        }
    }
}

console.log("[\""+array[0]+"\",\""+array[1]+"\",\""+array[2]+"\",\""+array[3]+"\"]");


